# skeleton pipeline for terraform deployment
image: registry.gitlab.com/ciorg/community/images/ubuntu:latest

variables:
  APP_VERSION: "0.1" #<Major>.<Minor> version prefix, pipeline appends ".<deploy version>"
  PIPELINE_IMAGE_VERSION: "v1.1.1" #version of pipeline job images to use
  SERVICE_NAME: {PROJECT_NAME}
  TEAM_EMAIL: "IT_SE_PATCh_Developers@us.ci.org" #Contact email for tagging AWS created resources [defaults to gitlab developer email if empty]
  TEAM_NAME: "PATCh" #Contact team for tagging AWS created resources [defaults to domain/team tag if empty]
  DEPARTMENT_NAME: "Services" #Identify your department name or domain for tagging AWS created resources [defaults to domain/team tag if empty]
  ADDITIONAL_AWS_TAGS: "" #Add more AWS tags with this format: '"tag1":"info1","tag2":"info2","tag3":"info3"'

.runner-tag:
  tags:
    - patch-eks-nonprod

.stage-runner-tag:
  tags:
    - patch-eks-stage

.prod-runner-tag:
  tags:
    - patch-eks-prod

stages:
  - build
  - test
  - deploy

include:
  - local: "/pipeline/before-scripts.gitlab-ci.yml"
  - local: "/pipeline/rules.gitlab-ci.yml"
  - template: SAST.gitlab-ci.yml

build:
  extends:
    - .core-onsuccess-rules
    - .runner-tag
  stage: build
  image: registry.gitlab.com/ciorg/community/images/python:latest
  script:
    - echo "build job"
    - gitlab_access_setup
    - dependency_install zip
    - zip ./main.zip main.py
  artifacts:
    untracked: false
    expire_in: 1 days
    paths:
      - ./main.zip

deploy devint:
  extends:
    - .core-onsuccess-rules
    - .runner-tag
  stage: deploy
  image: registry.gitlab.com/ciorg/community/cmf/pipeline/job-images/terraform:v1.1.2
  variables:
    TF_VAR_git_url: ${CI_PROJECT_URL}
    TF_VAR_deploy_environment: "nonprod"
    TF_VAR_terraform_remote_state_bucket: runner-cache-patchnonprod
    TF_VAR_version_name: ${CI_COMMIT_TAG}
    TF_VAR_service_name: ${SERVICE_NAME}
    TF_VAR_team_name: ${TEAM_NAME}
    TF_VAR_department_name: ${DEPARTMENT_NAME}
  script:
    - echo "deploy to AWS"
    - unset AWS_ACCESS_KEY_ID
    - unset AWS_SECRET_ACCESS_KEY
    - unset AWS_REGION
    - dependency_install aws-cli
    - OUT=$(aws sts assume-role --role-arn ${DST_AWS_ROLE_ARN} --role-session-name "my-test-assume-role"); export AWS_ACCESS_KEY_ID=$(echo $OUT | jq -r '.Credentials''.AccessKeyId'); export AWS_SECRET_ACCESS_KEY=$(echo $OUT | jq -r '.Credentials''.SecretAccessKey'); export AWS_SESSION_TOKEN=$(echo $OUT | jq -r '.Credentials''.SessionToken');
    - terraform init -backend-config="bucket=${TF_VAR_terraform_remote_state_bucket}" -backend-config="key=${CI_PROJECT_PATH}/${TF_VAR_deploy_environment}/terraform.tfstate"
    - terraform apply -auto-approve

deploy stage:
  extends:
    - .core-manual-nonblocking-rules
    - .stage-runner-tag
  stage: deploy
  image: registry.gitlab.com/ciorg/community/cmf/pipeline/job-images/terraform:v1.1.2
  variables:
    TF_VAR_git_url: ${CI_PROJECT_URL}
    TF_VAR_deploy_environment: "nonprod"
    TF_VAR_terraform_remote_state_bucket: runner-cache-patchstage
    TF_VAR_version_name: ${CI_COMMIT_TAG}
    TF_VAR_service_name: ${SERVICE_NAME}
    TF_VAR_team_name: ${TEAM_NAME}
    TF_VAR_department_name: ${DEPARTMENT_NAME}
  script:
    - echo "deploy to AWS"
    - unset AWS_ACCESS_KEY_ID
    - unset AWS_SECRET_ACCESS_KEY
    - unset AWS_REGION
    - dependency_install aws-cli
    - OUT=$(aws sts assume-role --role-arn ${DST_AWS_ROLE_ARN} --role-session-name "my-test-assume-role"); export AWS_ACCESS_KEY_ID=$(echo $OUT | jq -r '.Credentials''.AccessKeyId'); export AWS_SECRET_ACCESS_KEY=$(echo $OUT | jq -r '.Credentials''.SecretAccessKey'); export AWS_SESSION_TOKEN=$(echo $OUT | jq -r '.Credentials''.SessionToken');
    - terraform init -backend-config="bucket=${TF_VAR_terraform_remote_state_bucket}" -backend-config="key=${CI_PROJECT_PATH}/${TF_VAR_deploy_environment}/terraform.tfstate"
    - terraform apply -auto-approve

deploy prod:
  extends:
    - .core-manual-nonblocking-rules
    - .prod-runner-tag
  stage: deploy
  image: registry.gitlab.com/ciorg/community/cmf/pipeline/job-images/terraform:v1.1.2
  variables:
    TF_VAR_git_url: ${CI_PROJECT_URL}
    TF_VAR_deploy_environment: "prod"
    TF_VAR_terraform_remote_state_bucket: runner-cache-patchprod
    TF_VAR_version_name: ${CI_COMMIT_TAG}
    TF_VAR_service_name: ${SERVICE_NAME}
    TF_VAR_team_name: ${TEAM_NAME}
    TF_VAR_department_name: ${DEPARTMENT_NAME}
  script:
    - echo "deploy to AWS"
    - unset AWS_ACCESS_KEY_ID
    - unset AWS_SECRET_ACCESS_KEY
    - unset AWS_REGION
    - dependency_install aws-cli
    - OUT=$(aws sts assume-role --role-arn ${DST_AWS_ROLE_ARN} --role-session-name "my-test-assume-role"); export AWS_ACCESS_KEY_ID=$(echo $OUT | jq -r '.Credentials''.AccessKeyId'); export AWS_SECRET_ACCESS_KEY=$(echo $OUT | jq -r '.Credentials''.SecretAccessKey'); export AWS_SESSION_TOKEN=$(echo $OUT | jq -r '.Credentials''.SessionToken');
    - terraform init -backend-config="bucket=${TF_VAR_terraform_remote_state_bucket}" -backend-config="key=${CI_PROJECT_PATH}/${TF_VAR_deploy_environment}/terraform.tfstate"
    - terraform apply -auto-approve

deploy readme:
  extends:
    - .core-manual-nonblocking-rules
    - .runner-tag
  stage: deploy
  variables:
    CONFLUENCE_DOMAIN: ${CONFLUENCE_DOMAIN}
    CONFLUENCE_USER_NAME: ${CONFLUENCE_USER_NAME}
    CONFLUENCE_API_KEY: ${CONFLUENCE_API_KEY}
    CONFLUENCE_SPACE_KEY: ${CONFLUENCE_SPACE_KEY}
  script:
    - echo "deploy README to confluence"
    - dependency_install python3
    - dependency_install python3-pip
    - pip3 install markdown-to-confluence
    - python3 -m md2conf README.md
